// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MESSAGEWRAPPER_PROTOCOL_H_
#define FLATBUFFERS_GENERATED_MESSAGEWRAPPER_PROTOCOL_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace protocol {

struct REQUEST_LOGIN;
struct REQUEST_LOGINBuilder;

struct RESPONSE_LOGIN;
struct RESPONSE_LOGINBuilder;

struct REQUEST_REGIST;
struct REQUEST_REGISTBuilder;

struct RESPONSE_REGIST;
struct RESPONSE_REGISTBuilder;

struct REQUEST_ROOM_CREATE;
struct REQUEST_ROOM_CREATEBuilder;

struct RESPONSE_ROOM_CREATE;
struct RESPONSE_ROOM_CREATEBuilder;

struct REQUEST_ROOM_ENTRANCE;
struct REQUEST_ROOM_ENTRANCEBuilder;

struct RESPONSE_ROOM_ENTRANCE;
struct RESPONSE_ROOM_ENTRANCEBuilder;

struct REQUEST_ROOM_LEAVE;
struct REQUEST_ROOM_LEAVEBuilder;

struct RESPONSE_ROOM_LEAVE;
struct RESPONSE_ROOM_LEAVEBuilder;

struct REQUEST_SEND_MESSAGE;
struct REQUEST_SEND_MESSAGEBuilder;

struct RESPONSE_SEND_MESSAGE;
struct RESPONSE_SEND_MESSAGEBuilder;

struct REQUEST_LOGOUT;
struct REQUEST_LOGOUTBuilder;

struct RESPONSE_LOGOUT;
struct RESPONSE_LOGOUTBuilder;

struct NOTIFY_MESSAGE;
struct NOTIFY_MESSAGEBuilder;

struct NOTIFY_ROOMLIST;
struct NOTIFY_ROOMLISTBuilder;

struct MESSAGE_WRAPPER;
struct MESSAGE_WRAPPERBuilder;

enum MESSAGETYPE : int32_t {
  MESSAGETYPE_BEGIN = 0,
  MESSAGETYPE_REQUEST_LOGIN = 1,
  MESSAGETYPE_RESOPNSE_LOGIN = 2,
  MESSAGETYPE_REQUEST_REGIST = 3,
  MESSAGETYPE_RESPONSE_REGIST = 4,
  MESSAGETYPE_REQUEST_ROOM_CREATE = 5,
  MESSAGETYPE_RESPONSE_ROOM_CREATE = 6,
  MESSAGETYPE_REQUEST_ROOM_ENTRANCE = 7,
  MESSAGETYPE_RESPONSE_ROOM_ENTRANCE = 8,
  MESSAGETYPE_REQUEST_ROOM_LEAVE = 9,
  MESSAGETYPE_RESPONSE_ROOM_LEAVE = 10,
  MESSAGETYPE_REQUEST_SEND_MESSAGE = 11,
  MESSAGETYPE_RESPONSE_SEND_MESSAGE = 12,
  MESSAGETYPE_NOTIFY_MESSAGE = 13,
  MESSAGETYPE_NOTIFY_ROOMLIST = 14,
  MESSAGETYPE_REQUEST_LOGOUT = 15,
  MESSAGETYPE_RESPONSE_LOGOUT = 16,
  MESSAGETYPE_END = 17,
  MESSAGETYPE_MIN = MESSAGETYPE_BEGIN,
  MESSAGETYPE_MAX = MESSAGETYPE_END
};

inline const MESSAGETYPE (&EnumValuesMESSAGETYPE())[18] {
  static const MESSAGETYPE values[] = {
    MESSAGETYPE_BEGIN,
    MESSAGETYPE_REQUEST_LOGIN,
    MESSAGETYPE_RESOPNSE_LOGIN,
    MESSAGETYPE_REQUEST_REGIST,
    MESSAGETYPE_RESPONSE_REGIST,
    MESSAGETYPE_REQUEST_ROOM_CREATE,
    MESSAGETYPE_RESPONSE_ROOM_CREATE,
    MESSAGETYPE_REQUEST_ROOM_ENTRANCE,
    MESSAGETYPE_RESPONSE_ROOM_ENTRANCE,
    MESSAGETYPE_REQUEST_ROOM_LEAVE,
    MESSAGETYPE_RESPONSE_ROOM_LEAVE,
    MESSAGETYPE_REQUEST_SEND_MESSAGE,
    MESSAGETYPE_RESPONSE_SEND_MESSAGE,
    MESSAGETYPE_NOTIFY_MESSAGE,
    MESSAGETYPE_NOTIFY_ROOMLIST,
    MESSAGETYPE_REQUEST_LOGOUT,
    MESSAGETYPE_RESPONSE_LOGOUT,
    MESSAGETYPE_END
  };
  return values;
}

inline const char * const *EnumNamesMESSAGETYPE() {
  static const char * const names[19] = {
    "BEGIN",
    "REQUEST_LOGIN",
    "RESOPNSE_LOGIN",
    "REQUEST_REGIST",
    "RESPONSE_REGIST",
    "REQUEST_ROOM_CREATE",
    "RESPONSE_ROOM_CREATE",
    "REQUEST_ROOM_ENTRANCE",
    "RESPONSE_ROOM_ENTRANCE",
    "REQUEST_ROOM_LEAVE",
    "RESPONSE_ROOM_LEAVE",
    "REQUEST_SEND_MESSAGE",
    "RESPONSE_SEND_MESSAGE",
    "NOTIFY_MESSAGE",
    "NOTIFY_ROOMLIST",
    "REQUEST_LOGOUT",
    "RESPONSE_LOGOUT",
    "END",
    nullptr
  };
  return names;
}

inline const char *EnumNameMESSAGETYPE(MESSAGETYPE e) {
  if (::flatbuffers::IsOutRange(e, MESSAGETYPE_BEGIN, MESSAGETYPE_END)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesMESSAGETYPE()[index];
}

enum MessageContent : uint8_t {
  MessageContent_NONE = 0,
  MessageContent_REQUEST_LOGIN = 1,
  MessageContent_RESPONSE_LOGIN = 2,
  MessageContent_REQUEST_REGIST = 3,
  MessageContent_RESPONSE_REGIST = 4,
  MessageContent_REQUEST_ROOM_CREATE = 5,
  MessageContent_RESPONSE_ROOM_CREATE = 6,
  MessageContent_REQUEST_ROOM_ENTRANCE = 7,
  MessageContent_RESPONSE_ROOM_ENTRANCE = 8,
  MessageContent_REQUEST_ROOM_LEAVE = 9,
  MessageContent_RESPONSE_ROOM_LEAVE = 10,
  MessageContent_REQUEST_SEND_MESSAGE = 11,
  MessageContent_RESPONSE_SEND_MESSAGE = 12,
  MessageContent_NOTIFY_MESSAGE = 13,
  MessageContent_NOTIFY_ROOMLIST = 14,
  MessageContent_REQUEST_LOGOUT = 15,
  MessageContent_RESPONSE_LOGOUT = 16,
  MessageContent_MIN = MessageContent_NONE,
  MessageContent_MAX = MessageContent_RESPONSE_LOGOUT
};

inline const MessageContent (&EnumValuesMessageContent())[17] {
  static const MessageContent values[] = {
    MessageContent_NONE,
    MessageContent_REQUEST_LOGIN,
    MessageContent_RESPONSE_LOGIN,
    MessageContent_REQUEST_REGIST,
    MessageContent_RESPONSE_REGIST,
    MessageContent_REQUEST_ROOM_CREATE,
    MessageContent_RESPONSE_ROOM_CREATE,
    MessageContent_REQUEST_ROOM_ENTRANCE,
    MessageContent_RESPONSE_ROOM_ENTRANCE,
    MessageContent_REQUEST_ROOM_LEAVE,
    MessageContent_RESPONSE_ROOM_LEAVE,
    MessageContent_REQUEST_SEND_MESSAGE,
    MessageContent_RESPONSE_SEND_MESSAGE,
    MessageContent_NOTIFY_MESSAGE,
    MessageContent_NOTIFY_ROOMLIST,
    MessageContent_REQUEST_LOGOUT,
    MessageContent_RESPONSE_LOGOUT
  };
  return values;
}

inline const char * const *EnumNamesMessageContent() {
  static const char * const names[18] = {
    "NONE",
    "REQUEST_LOGIN",
    "RESPONSE_LOGIN",
    "REQUEST_REGIST",
    "RESPONSE_REGIST",
    "REQUEST_ROOM_CREATE",
    "RESPONSE_ROOM_CREATE",
    "REQUEST_ROOM_ENTRANCE",
    "RESPONSE_ROOM_ENTRANCE",
    "REQUEST_ROOM_LEAVE",
    "RESPONSE_ROOM_LEAVE",
    "REQUEST_SEND_MESSAGE",
    "RESPONSE_SEND_MESSAGE",
    "NOTIFY_MESSAGE",
    "NOTIFY_ROOMLIST",
    "REQUEST_LOGOUT",
    "RESPONSE_LOGOUT",
    nullptr
  };
  return names;
}

inline const char *EnumNameMessageContent(MessageContent e) {
  if (::flatbuffers::IsOutRange(e, MessageContent_NONE, MessageContent_RESPONSE_LOGOUT)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesMessageContent()[index];
}

template<typename T> struct MessageContentTraits {
  static const MessageContent enum_value = MessageContent_NONE;
};

template<> struct MessageContentTraits<protocol::REQUEST_LOGIN> {
  static const MessageContent enum_value = MessageContent_REQUEST_LOGIN;
};

template<> struct MessageContentTraits<protocol::RESPONSE_LOGIN> {
  static const MessageContent enum_value = MessageContent_RESPONSE_LOGIN;
};

template<> struct MessageContentTraits<protocol::REQUEST_REGIST> {
  static const MessageContent enum_value = MessageContent_REQUEST_REGIST;
};

template<> struct MessageContentTraits<protocol::RESPONSE_REGIST> {
  static const MessageContent enum_value = MessageContent_RESPONSE_REGIST;
};

template<> struct MessageContentTraits<protocol::REQUEST_ROOM_CREATE> {
  static const MessageContent enum_value = MessageContent_REQUEST_ROOM_CREATE;
};

template<> struct MessageContentTraits<protocol::RESPONSE_ROOM_CREATE> {
  static const MessageContent enum_value = MessageContent_RESPONSE_ROOM_CREATE;
};

template<> struct MessageContentTraits<protocol::REQUEST_ROOM_ENTRANCE> {
  static const MessageContent enum_value = MessageContent_REQUEST_ROOM_ENTRANCE;
};

template<> struct MessageContentTraits<protocol::RESPONSE_ROOM_ENTRANCE> {
  static const MessageContent enum_value = MessageContent_RESPONSE_ROOM_ENTRANCE;
};

template<> struct MessageContentTraits<protocol::REQUEST_ROOM_LEAVE> {
  static const MessageContent enum_value = MessageContent_REQUEST_ROOM_LEAVE;
};

template<> struct MessageContentTraits<protocol::RESPONSE_ROOM_LEAVE> {
  static const MessageContent enum_value = MessageContent_RESPONSE_ROOM_LEAVE;
};

template<> struct MessageContentTraits<protocol::REQUEST_SEND_MESSAGE> {
  static const MessageContent enum_value = MessageContent_REQUEST_SEND_MESSAGE;
};

template<> struct MessageContentTraits<protocol::RESPONSE_SEND_MESSAGE> {
  static const MessageContent enum_value = MessageContent_RESPONSE_SEND_MESSAGE;
};

template<> struct MessageContentTraits<protocol::NOTIFY_MESSAGE> {
  static const MessageContent enum_value = MessageContent_NOTIFY_MESSAGE;
};

template<> struct MessageContentTraits<protocol::NOTIFY_ROOMLIST> {
  static const MessageContent enum_value = MessageContent_NOTIFY_ROOMLIST;
};

template<> struct MessageContentTraits<protocol::REQUEST_LOGOUT> {
  static const MessageContent enum_value = MessageContent_REQUEST_LOGOUT;
};

template<> struct MessageContentTraits<protocol::RESPONSE_LOGOUT> {
  static const MessageContent enum_value = MessageContent_RESPONSE_LOGOUT;
};

bool VerifyMessageContent(::flatbuffers::Verifier &verifier, const void *obj, MessageContent type);
bool VerifyMessageContentVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

struct REQUEST_LOGIN FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef REQUEST_LOGINBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_PASSWORD = 6
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const ::flatbuffers::String *password() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PASSWORD);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_PASSWORD) &&
           verifier.VerifyString(password()) &&
           verifier.EndTable();
  }
};

struct REQUEST_LOGINBuilder {
  typedef REQUEST_LOGIN Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(REQUEST_LOGIN::VT_NAME, name);
  }
  void add_password(::flatbuffers::Offset<::flatbuffers::String> password) {
    fbb_.AddOffset(REQUEST_LOGIN::VT_PASSWORD, password);
  }
  explicit REQUEST_LOGINBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<REQUEST_LOGIN> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<REQUEST_LOGIN>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<REQUEST_LOGIN> CreateREQUEST_LOGIN(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> password = 0) {
  REQUEST_LOGINBuilder builder_(_fbb);
  builder_.add_password(password);
  builder_.add_name(name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<REQUEST_LOGIN> CreateREQUEST_LOGINDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const char *password = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto password__ = password ? _fbb.CreateString(password) : 0;
  return protocol::CreateREQUEST_LOGIN(
      _fbb,
      name__,
      password__);
}

struct RESPONSE_LOGIN FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RESPONSE_LOGINBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_FEEDBACK = 6
  };
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  bool feedback() const {
    return GetField<uint8_t>(VT_FEEDBACK, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID, 4) &&
           VerifyField<uint8_t>(verifier, VT_FEEDBACK, 1) &&
           verifier.EndTable();
  }
};

struct RESPONSE_LOGINBuilder {
  typedef RESPONSE_LOGIN Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(RESPONSE_LOGIN::VT_ID, id, 0);
  }
  void add_feedback(bool feedback) {
    fbb_.AddElement<uint8_t>(RESPONSE_LOGIN::VT_FEEDBACK, static_cast<uint8_t>(feedback), 0);
  }
  explicit RESPONSE_LOGINBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RESPONSE_LOGIN> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RESPONSE_LOGIN>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<RESPONSE_LOGIN> CreateRESPONSE_LOGIN(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    bool feedback = false) {
  RESPONSE_LOGINBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_feedback(feedback);
  return builder_.Finish();
}

struct REQUEST_REGIST FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef REQUEST_REGISTBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_PASSWORD = 6
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const ::flatbuffers::String *password() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PASSWORD);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_PASSWORD) &&
           verifier.VerifyString(password()) &&
           verifier.EndTable();
  }
};

struct REQUEST_REGISTBuilder {
  typedef REQUEST_REGIST Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(REQUEST_REGIST::VT_NAME, name);
  }
  void add_password(::flatbuffers::Offset<::flatbuffers::String> password) {
    fbb_.AddOffset(REQUEST_REGIST::VT_PASSWORD, password);
  }
  explicit REQUEST_REGISTBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<REQUEST_REGIST> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<REQUEST_REGIST>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<REQUEST_REGIST> CreateREQUEST_REGIST(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> password = 0) {
  REQUEST_REGISTBuilder builder_(_fbb);
  builder_.add_password(password);
  builder_.add_name(name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<REQUEST_REGIST> CreateREQUEST_REGISTDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const char *password = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto password__ = password ? _fbb.CreateString(password) : 0;
  return protocol::CreateREQUEST_REGIST(
      _fbb,
      name__,
      password__);
}

struct RESPONSE_REGIST FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RESPONSE_REGISTBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_FEEDBACK = 6
  };
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  bool feedback() const {
    return GetField<uint8_t>(VT_FEEDBACK, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID, 4) &&
           VerifyField<uint8_t>(verifier, VT_FEEDBACK, 1) &&
           verifier.EndTable();
  }
};

struct RESPONSE_REGISTBuilder {
  typedef RESPONSE_REGIST Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(RESPONSE_REGIST::VT_ID, id, 0);
  }
  void add_feedback(bool feedback) {
    fbb_.AddElement<uint8_t>(RESPONSE_REGIST::VT_FEEDBACK, static_cast<uint8_t>(feedback), 0);
  }
  explicit RESPONSE_REGISTBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RESPONSE_REGIST> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RESPONSE_REGIST>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<RESPONSE_REGIST> CreateRESPONSE_REGIST(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    bool feedback = false) {
  RESPONSE_REGISTBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_feedback(feedback);
  return builder_.Finish();
}

struct REQUEST_ROOM_CREATE FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef REQUEST_ROOM_CREATEBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_ROOM_NAME = 6,
    VT_ROOM_PASSWORD = 8
  };
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  const ::flatbuffers::String *room_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ROOM_NAME);
  }
  const ::flatbuffers::String *room_password() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ROOM_PASSWORD);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID, 4) &&
           VerifyOffset(verifier, VT_ROOM_NAME) &&
           verifier.VerifyString(room_name()) &&
           VerifyOffset(verifier, VT_ROOM_PASSWORD) &&
           verifier.VerifyString(room_password()) &&
           verifier.EndTable();
  }
};

struct REQUEST_ROOM_CREATEBuilder {
  typedef REQUEST_ROOM_CREATE Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(REQUEST_ROOM_CREATE::VT_ID, id, 0);
  }
  void add_room_name(::flatbuffers::Offset<::flatbuffers::String> room_name) {
    fbb_.AddOffset(REQUEST_ROOM_CREATE::VT_ROOM_NAME, room_name);
  }
  void add_room_password(::flatbuffers::Offset<::flatbuffers::String> room_password) {
    fbb_.AddOffset(REQUEST_ROOM_CREATE::VT_ROOM_PASSWORD, room_password);
  }
  explicit REQUEST_ROOM_CREATEBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<REQUEST_ROOM_CREATE> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<REQUEST_ROOM_CREATE>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<REQUEST_ROOM_CREATE> CreateREQUEST_ROOM_CREATE(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> room_name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> room_password = 0) {
  REQUEST_ROOM_CREATEBuilder builder_(_fbb);
  builder_.add_room_password(room_password);
  builder_.add_room_name(room_name);
  builder_.add_id(id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<REQUEST_ROOM_CREATE> CreateREQUEST_ROOM_CREATEDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    const char *room_name = nullptr,
    const char *room_password = nullptr) {
  auto room_name__ = room_name ? _fbb.CreateString(room_name) : 0;
  auto room_password__ = room_password ? _fbb.CreateString(room_password) : 0;
  return protocol::CreateREQUEST_ROOM_CREATE(
      _fbb,
      id,
      room_name__,
      room_password__);
}

struct RESPONSE_ROOM_CREATE FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RESPONSE_ROOM_CREATEBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ROOM_ID = 4,
    VT_FEEDBACK = 6
  };
  int32_t room_id() const {
    return GetField<int32_t>(VT_ROOM_ID, 0);
  }
  bool feedback() const {
    return GetField<uint8_t>(VT_FEEDBACK, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ROOM_ID, 4) &&
           VerifyField<uint8_t>(verifier, VT_FEEDBACK, 1) &&
           verifier.EndTable();
  }
};

struct RESPONSE_ROOM_CREATEBuilder {
  typedef RESPONSE_ROOM_CREATE Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_room_id(int32_t room_id) {
    fbb_.AddElement<int32_t>(RESPONSE_ROOM_CREATE::VT_ROOM_ID, room_id, 0);
  }
  void add_feedback(bool feedback) {
    fbb_.AddElement<uint8_t>(RESPONSE_ROOM_CREATE::VT_FEEDBACK, static_cast<uint8_t>(feedback), 0);
  }
  explicit RESPONSE_ROOM_CREATEBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RESPONSE_ROOM_CREATE> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RESPONSE_ROOM_CREATE>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<RESPONSE_ROOM_CREATE> CreateRESPONSE_ROOM_CREATE(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t room_id = 0,
    bool feedback = false) {
  RESPONSE_ROOM_CREATEBuilder builder_(_fbb);
  builder_.add_room_id(room_id);
  builder_.add_feedback(feedback);
  return builder_.Finish();
}

struct REQUEST_ROOM_ENTRANCE FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef REQUEST_ROOM_ENTRANCEBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_ROOM_NAME = 6,
    VT_ROOM_PASSWORD = 8
  };
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  const ::flatbuffers::String *room_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ROOM_NAME);
  }
  const ::flatbuffers::String *room_password() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ROOM_PASSWORD);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID, 4) &&
           VerifyOffset(verifier, VT_ROOM_NAME) &&
           verifier.VerifyString(room_name()) &&
           VerifyOffset(verifier, VT_ROOM_PASSWORD) &&
           verifier.VerifyString(room_password()) &&
           verifier.EndTable();
  }
};

struct REQUEST_ROOM_ENTRANCEBuilder {
  typedef REQUEST_ROOM_ENTRANCE Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(REQUEST_ROOM_ENTRANCE::VT_ID, id, 0);
  }
  void add_room_name(::flatbuffers::Offset<::flatbuffers::String> room_name) {
    fbb_.AddOffset(REQUEST_ROOM_ENTRANCE::VT_ROOM_NAME, room_name);
  }
  void add_room_password(::flatbuffers::Offset<::flatbuffers::String> room_password) {
    fbb_.AddOffset(REQUEST_ROOM_ENTRANCE::VT_ROOM_PASSWORD, room_password);
  }
  explicit REQUEST_ROOM_ENTRANCEBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<REQUEST_ROOM_ENTRANCE> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<REQUEST_ROOM_ENTRANCE>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<REQUEST_ROOM_ENTRANCE> CreateREQUEST_ROOM_ENTRANCE(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> room_name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> room_password = 0) {
  REQUEST_ROOM_ENTRANCEBuilder builder_(_fbb);
  builder_.add_room_password(room_password);
  builder_.add_room_name(room_name);
  builder_.add_id(id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<REQUEST_ROOM_ENTRANCE> CreateREQUEST_ROOM_ENTRANCEDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    const char *room_name = nullptr,
    const char *room_password = nullptr) {
  auto room_name__ = room_name ? _fbb.CreateString(room_name) : 0;
  auto room_password__ = room_password ? _fbb.CreateString(room_password) : 0;
  return protocol::CreateREQUEST_ROOM_ENTRANCE(
      _fbb,
      id,
      room_name__,
      room_password__);
}

struct RESPONSE_ROOM_ENTRANCE FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RESPONSE_ROOM_ENTRANCEBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ROOM_ID = 4,
    VT_FEEDBACK = 6
  };
  int32_t room_id() const {
    return GetField<int32_t>(VT_ROOM_ID, 0);
  }
  bool feedback() const {
    return GetField<uint8_t>(VT_FEEDBACK, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ROOM_ID, 4) &&
           VerifyField<uint8_t>(verifier, VT_FEEDBACK, 1) &&
           verifier.EndTable();
  }
};

struct RESPONSE_ROOM_ENTRANCEBuilder {
  typedef RESPONSE_ROOM_ENTRANCE Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_room_id(int32_t room_id) {
    fbb_.AddElement<int32_t>(RESPONSE_ROOM_ENTRANCE::VT_ROOM_ID, room_id, 0);
  }
  void add_feedback(bool feedback) {
    fbb_.AddElement<uint8_t>(RESPONSE_ROOM_ENTRANCE::VT_FEEDBACK, static_cast<uint8_t>(feedback), 0);
  }
  explicit RESPONSE_ROOM_ENTRANCEBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RESPONSE_ROOM_ENTRANCE> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RESPONSE_ROOM_ENTRANCE>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<RESPONSE_ROOM_ENTRANCE> CreateRESPONSE_ROOM_ENTRANCE(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t room_id = 0,
    bool feedback = false) {
  RESPONSE_ROOM_ENTRANCEBuilder builder_(_fbb);
  builder_.add_room_id(room_id);
  builder_.add_feedback(feedback);
  return builder_.Finish();
}

struct REQUEST_ROOM_LEAVE FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef REQUEST_ROOM_LEAVEBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_ROOM_ID = 6
  };
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  int32_t room_id() const {
    return GetField<int32_t>(VT_ROOM_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID, 4) &&
           VerifyField<int32_t>(verifier, VT_ROOM_ID, 4) &&
           verifier.EndTable();
  }
};

struct REQUEST_ROOM_LEAVEBuilder {
  typedef REQUEST_ROOM_LEAVE Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(REQUEST_ROOM_LEAVE::VT_ID, id, 0);
  }
  void add_room_id(int32_t room_id) {
    fbb_.AddElement<int32_t>(REQUEST_ROOM_LEAVE::VT_ROOM_ID, room_id, 0);
  }
  explicit REQUEST_ROOM_LEAVEBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<REQUEST_ROOM_LEAVE> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<REQUEST_ROOM_LEAVE>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<REQUEST_ROOM_LEAVE> CreateREQUEST_ROOM_LEAVE(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    int32_t room_id = 0) {
  REQUEST_ROOM_LEAVEBuilder builder_(_fbb);
  builder_.add_room_id(room_id);
  builder_.add_id(id);
  return builder_.Finish();
}

struct RESPONSE_ROOM_LEAVE FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RESPONSE_ROOM_LEAVEBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ROOM_ID = 4,
    VT_FEEDBACK = 6
  };
  int32_t room_id() const {
    return GetField<int32_t>(VT_ROOM_ID, 0);
  }
  bool feedback() const {
    return GetField<uint8_t>(VT_FEEDBACK, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ROOM_ID, 4) &&
           VerifyField<uint8_t>(verifier, VT_FEEDBACK, 1) &&
           verifier.EndTable();
  }
};

struct RESPONSE_ROOM_LEAVEBuilder {
  typedef RESPONSE_ROOM_LEAVE Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_room_id(int32_t room_id) {
    fbb_.AddElement<int32_t>(RESPONSE_ROOM_LEAVE::VT_ROOM_ID, room_id, 0);
  }
  void add_feedback(bool feedback) {
    fbb_.AddElement<uint8_t>(RESPONSE_ROOM_LEAVE::VT_FEEDBACK, static_cast<uint8_t>(feedback), 0);
  }
  explicit RESPONSE_ROOM_LEAVEBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RESPONSE_ROOM_LEAVE> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RESPONSE_ROOM_LEAVE>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<RESPONSE_ROOM_LEAVE> CreateRESPONSE_ROOM_LEAVE(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t room_id = 0,
    bool feedback = false) {
  RESPONSE_ROOM_LEAVEBuilder builder_(_fbb);
  builder_.add_room_id(room_id);
  builder_.add_feedback(feedback);
  return builder_.Finish();
}

struct REQUEST_SEND_MESSAGE FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef REQUEST_SEND_MESSAGEBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CONTENT = 6
  };
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  const ::flatbuffers::String *content() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CONTENT);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID, 4) &&
           VerifyOffset(verifier, VT_CONTENT) &&
           verifier.VerifyString(content()) &&
           verifier.EndTable();
  }
};

struct REQUEST_SEND_MESSAGEBuilder {
  typedef REQUEST_SEND_MESSAGE Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(REQUEST_SEND_MESSAGE::VT_ID, id, 0);
  }
  void add_content(::flatbuffers::Offset<::flatbuffers::String> content) {
    fbb_.AddOffset(REQUEST_SEND_MESSAGE::VT_CONTENT, content);
  }
  explicit REQUEST_SEND_MESSAGEBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<REQUEST_SEND_MESSAGE> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<REQUEST_SEND_MESSAGE>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<REQUEST_SEND_MESSAGE> CreateREQUEST_SEND_MESSAGE(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> content = 0) {
  REQUEST_SEND_MESSAGEBuilder builder_(_fbb);
  builder_.add_content(content);
  builder_.add_id(id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<REQUEST_SEND_MESSAGE> CreateREQUEST_SEND_MESSAGEDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    const char *content = nullptr) {
  auto content__ = content ? _fbb.CreateString(content) : 0;
  return protocol::CreateREQUEST_SEND_MESSAGE(
      _fbb,
      id,
      content__);
}

struct RESPONSE_SEND_MESSAGE FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RESPONSE_SEND_MESSAGEBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FEEDBACK = 4
  };
  bool feedback() const {
    return GetField<uint8_t>(VT_FEEDBACK, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_FEEDBACK, 1) &&
           verifier.EndTable();
  }
};

struct RESPONSE_SEND_MESSAGEBuilder {
  typedef RESPONSE_SEND_MESSAGE Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_feedback(bool feedback) {
    fbb_.AddElement<uint8_t>(RESPONSE_SEND_MESSAGE::VT_FEEDBACK, static_cast<uint8_t>(feedback), 0);
  }
  explicit RESPONSE_SEND_MESSAGEBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RESPONSE_SEND_MESSAGE> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RESPONSE_SEND_MESSAGE>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<RESPONSE_SEND_MESSAGE> CreateRESPONSE_SEND_MESSAGE(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool feedback = false) {
  RESPONSE_SEND_MESSAGEBuilder builder_(_fbb);
  builder_.add_feedback(feedback);
  return builder_.Finish();
}

struct REQUEST_LOGOUT FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef REQUEST_LOGOUTBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4
  };
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID, 4) &&
           verifier.EndTable();
  }
};

struct REQUEST_LOGOUTBuilder {
  typedef REQUEST_LOGOUT Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(REQUEST_LOGOUT::VT_ID, id, 0);
  }
  explicit REQUEST_LOGOUTBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<REQUEST_LOGOUT> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<REQUEST_LOGOUT>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<REQUEST_LOGOUT> CreateREQUEST_LOGOUT(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0) {
  REQUEST_LOGOUTBuilder builder_(_fbb);
  builder_.add_id(id);
  return builder_.Finish();
}

struct RESPONSE_LOGOUT FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RESPONSE_LOGOUTBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FEEDBACK = 4
  };
  bool feedback() const {
    return GetField<uint8_t>(VT_FEEDBACK, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_FEEDBACK, 1) &&
           verifier.EndTable();
  }
};

struct RESPONSE_LOGOUTBuilder {
  typedef RESPONSE_LOGOUT Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_feedback(bool feedback) {
    fbb_.AddElement<uint8_t>(RESPONSE_LOGOUT::VT_FEEDBACK, static_cast<uint8_t>(feedback), 0);
  }
  explicit RESPONSE_LOGOUTBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RESPONSE_LOGOUT> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RESPONSE_LOGOUT>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<RESPONSE_LOGOUT> CreateRESPONSE_LOGOUT(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool feedback = false) {
  RESPONSE_LOGOUTBuilder builder_(_fbb);
  builder_.add_feedback(feedback);
  return builder_.Finish();
}

struct NOTIFY_MESSAGE FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef NOTIFY_MESSAGEBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CONTENT = 6
  };
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  const ::flatbuffers::String *content() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CONTENT);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID, 4) &&
           VerifyOffset(verifier, VT_CONTENT) &&
           verifier.VerifyString(content()) &&
           verifier.EndTable();
  }
};

struct NOTIFY_MESSAGEBuilder {
  typedef NOTIFY_MESSAGE Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(NOTIFY_MESSAGE::VT_ID, id, 0);
  }
  void add_content(::flatbuffers::Offset<::flatbuffers::String> content) {
    fbb_.AddOffset(NOTIFY_MESSAGE::VT_CONTENT, content);
  }
  explicit NOTIFY_MESSAGEBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<NOTIFY_MESSAGE> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<NOTIFY_MESSAGE>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<NOTIFY_MESSAGE> CreateNOTIFY_MESSAGE(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> content = 0) {
  NOTIFY_MESSAGEBuilder builder_(_fbb);
  builder_.add_content(content);
  builder_.add_id(id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<NOTIFY_MESSAGE> CreateNOTIFY_MESSAGEDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    const char *content = nullptr) {
  auto content__ = content ? _fbb.CreateString(content) : 0;
  return protocol::CreateNOTIFY_MESSAGE(
      _fbb,
      id,
      content__);
}

struct NOTIFY_ROOMLIST FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef NOTIFY_ROOMLISTBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           verifier.EndTable();
  }
};

struct NOTIFY_ROOMLISTBuilder {
  typedef NOTIFY_ROOMLIST Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(NOTIFY_ROOMLIST::VT_NAME, name);
  }
  explicit NOTIFY_ROOMLISTBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<NOTIFY_ROOMLIST> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<NOTIFY_ROOMLIST>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<NOTIFY_ROOMLIST> CreateNOTIFY_ROOMLIST(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0) {
  NOTIFY_ROOMLISTBuilder builder_(_fbb);
  builder_.add_name(name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<NOTIFY_ROOMLIST> CreateNOTIFY_ROOMLISTDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return protocol::CreateNOTIFY_ROOMLIST(
      _fbb,
      name__);
}

struct MESSAGE_WRAPPER FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MESSAGE_WRAPPERBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MESSAGE_TYPE = 4,
    VT_CONTENT_TYPE = 6,
    VT_CONTENT = 8
  };
  protocol::MESSAGETYPE message_type() const {
    return static_cast<protocol::MESSAGETYPE>(GetField<int32_t>(VT_MESSAGE_TYPE, 0));
  }
  protocol::MessageContent content_type() const {
    return static_cast<protocol::MessageContent>(GetField<uint8_t>(VT_CONTENT_TYPE, 0));
  }
  const void *content() const {
    return GetPointer<const void *>(VT_CONTENT);
  }
  template<typename T> const T *content_as() const;
  const protocol::REQUEST_LOGIN *content_as_REQUEST_LOGIN() const {
    return content_type() == protocol::MessageContent_REQUEST_LOGIN ? static_cast<const protocol::REQUEST_LOGIN *>(content()) : nullptr;
  }
  const protocol::RESPONSE_LOGIN *content_as_RESPONSE_LOGIN() const {
    return content_type() == protocol::MessageContent_RESPONSE_LOGIN ? static_cast<const protocol::RESPONSE_LOGIN *>(content()) : nullptr;
  }
  const protocol::REQUEST_REGIST *content_as_REQUEST_REGIST() const {
    return content_type() == protocol::MessageContent_REQUEST_REGIST ? static_cast<const protocol::REQUEST_REGIST *>(content()) : nullptr;
  }
  const protocol::RESPONSE_REGIST *content_as_RESPONSE_REGIST() const {
    return content_type() == protocol::MessageContent_RESPONSE_REGIST ? static_cast<const protocol::RESPONSE_REGIST *>(content()) : nullptr;
  }
  const protocol::REQUEST_ROOM_CREATE *content_as_REQUEST_ROOM_CREATE() const {
    return content_type() == protocol::MessageContent_REQUEST_ROOM_CREATE ? static_cast<const protocol::REQUEST_ROOM_CREATE *>(content()) : nullptr;
  }
  const protocol::RESPONSE_ROOM_CREATE *content_as_RESPONSE_ROOM_CREATE() const {
    return content_type() == protocol::MessageContent_RESPONSE_ROOM_CREATE ? static_cast<const protocol::RESPONSE_ROOM_CREATE *>(content()) : nullptr;
  }
  const protocol::REQUEST_ROOM_ENTRANCE *content_as_REQUEST_ROOM_ENTRANCE() const {
    return content_type() == protocol::MessageContent_REQUEST_ROOM_ENTRANCE ? static_cast<const protocol::REQUEST_ROOM_ENTRANCE *>(content()) : nullptr;
  }
  const protocol::RESPONSE_ROOM_ENTRANCE *content_as_RESPONSE_ROOM_ENTRANCE() const {
    return content_type() == protocol::MessageContent_RESPONSE_ROOM_ENTRANCE ? static_cast<const protocol::RESPONSE_ROOM_ENTRANCE *>(content()) : nullptr;
  }
  const protocol::REQUEST_ROOM_LEAVE *content_as_REQUEST_ROOM_LEAVE() const {
    return content_type() == protocol::MessageContent_REQUEST_ROOM_LEAVE ? static_cast<const protocol::REQUEST_ROOM_LEAVE *>(content()) : nullptr;
  }
  const protocol::RESPONSE_ROOM_LEAVE *content_as_RESPONSE_ROOM_LEAVE() const {
    return content_type() == protocol::MessageContent_RESPONSE_ROOM_LEAVE ? static_cast<const protocol::RESPONSE_ROOM_LEAVE *>(content()) : nullptr;
  }
  const protocol::REQUEST_SEND_MESSAGE *content_as_REQUEST_SEND_MESSAGE() const {
    return content_type() == protocol::MessageContent_REQUEST_SEND_MESSAGE ? static_cast<const protocol::REQUEST_SEND_MESSAGE *>(content()) : nullptr;
  }
  const protocol::RESPONSE_SEND_MESSAGE *content_as_RESPONSE_SEND_MESSAGE() const {
    return content_type() == protocol::MessageContent_RESPONSE_SEND_MESSAGE ? static_cast<const protocol::RESPONSE_SEND_MESSAGE *>(content()) : nullptr;
  }
  const protocol::NOTIFY_MESSAGE *content_as_NOTIFY_MESSAGE() const {
    return content_type() == protocol::MessageContent_NOTIFY_MESSAGE ? static_cast<const protocol::NOTIFY_MESSAGE *>(content()) : nullptr;
  }
  const protocol::NOTIFY_ROOMLIST *content_as_NOTIFY_ROOMLIST() const {
    return content_type() == protocol::MessageContent_NOTIFY_ROOMLIST ? static_cast<const protocol::NOTIFY_ROOMLIST *>(content()) : nullptr;
  }
  const protocol::REQUEST_LOGOUT *content_as_REQUEST_LOGOUT() const {
    return content_type() == protocol::MessageContent_REQUEST_LOGOUT ? static_cast<const protocol::REQUEST_LOGOUT *>(content()) : nullptr;
  }
  const protocol::RESPONSE_LOGOUT *content_as_RESPONSE_LOGOUT() const {
    return content_type() == protocol::MessageContent_RESPONSE_LOGOUT ? static_cast<const protocol::RESPONSE_LOGOUT *>(content()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_MESSAGE_TYPE, 4) &&
           VerifyField<uint8_t>(verifier, VT_CONTENT_TYPE, 1) &&
           VerifyOffset(verifier, VT_CONTENT) &&
           VerifyMessageContent(verifier, content(), content_type()) &&
           verifier.EndTable();
  }
};

template<> inline const protocol::REQUEST_LOGIN *MESSAGE_WRAPPER::content_as<protocol::REQUEST_LOGIN>() const {
  return content_as_REQUEST_LOGIN();
}

template<> inline const protocol::RESPONSE_LOGIN *MESSAGE_WRAPPER::content_as<protocol::RESPONSE_LOGIN>() const {
  return content_as_RESPONSE_LOGIN();
}

template<> inline const protocol::REQUEST_REGIST *MESSAGE_WRAPPER::content_as<protocol::REQUEST_REGIST>() const {
  return content_as_REQUEST_REGIST();
}

template<> inline const protocol::RESPONSE_REGIST *MESSAGE_WRAPPER::content_as<protocol::RESPONSE_REGIST>() const {
  return content_as_RESPONSE_REGIST();
}

template<> inline const protocol::REQUEST_ROOM_CREATE *MESSAGE_WRAPPER::content_as<protocol::REQUEST_ROOM_CREATE>() const {
  return content_as_REQUEST_ROOM_CREATE();
}

template<> inline const protocol::RESPONSE_ROOM_CREATE *MESSAGE_WRAPPER::content_as<protocol::RESPONSE_ROOM_CREATE>() const {
  return content_as_RESPONSE_ROOM_CREATE();
}

template<> inline const protocol::REQUEST_ROOM_ENTRANCE *MESSAGE_WRAPPER::content_as<protocol::REQUEST_ROOM_ENTRANCE>() const {
  return content_as_REQUEST_ROOM_ENTRANCE();
}

template<> inline const protocol::RESPONSE_ROOM_ENTRANCE *MESSAGE_WRAPPER::content_as<protocol::RESPONSE_ROOM_ENTRANCE>() const {
  return content_as_RESPONSE_ROOM_ENTRANCE();
}

template<> inline const protocol::REQUEST_ROOM_LEAVE *MESSAGE_WRAPPER::content_as<protocol::REQUEST_ROOM_LEAVE>() const {
  return content_as_REQUEST_ROOM_LEAVE();
}

template<> inline const protocol::RESPONSE_ROOM_LEAVE *MESSAGE_WRAPPER::content_as<protocol::RESPONSE_ROOM_LEAVE>() const {
  return content_as_RESPONSE_ROOM_LEAVE();
}

template<> inline const protocol::REQUEST_SEND_MESSAGE *MESSAGE_WRAPPER::content_as<protocol::REQUEST_SEND_MESSAGE>() const {
  return content_as_REQUEST_SEND_MESSAGE();
}

template<> inline const protocol::RESPONSE_SEND_MESSAGE *MESSAGE_WRAPPER::content_as<protocol::RESPONSE_SEND_MESSAGE>() const {
  return content_as_RESPONSE_SEND_MESSAGE();
}

template<> inline const protocol::NOTIFY_MESSAGE *MESSAGE_WRAPPER::content_as<protocol::NOTIFY_MESSAGE>() const {
  return content_as_NOTIFY_MESSAGE();
}

template<> inline const protocol::NOTIFY_ROOMLIST *MESSAGE_WRAPPER::content_as<protocol::NOTIFY_ROOMLIST>() const {
  return content_as_NOTIFY_ROOMLIST();
}

template<> inline const protocol::REQUEST_LOGOUT *MESSAGE_WRAPPER::content_as<protocol::REQUEST_LOGOUT>() const {
  return content_as_REQUEST_LOGOUT();
}

template<> inline const protocol::RESPONSE_LOGOUT *MESSAGE_WRAPPER::content_as<protocol::RESPONSE_LOGOUT>() const {
  return content_as_RESPONSE_LOGOUT();
}

struct MESSAGE_WRAPPERBuilder {
  typedef MESSAGE_WRAPPER Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_message_type(protocol::MESSAGETYPE message_type) {
    fbb_.AddElement<int32_t>(MESSAGE_WRAPPER::VT_MESSAGE_TYPE, static_cast<int32_t>(message_type), 0);
  }
  void add_content_type(protocol::MessageContent content_type) {
    fbb_.AddElement<uint8_t>(MESSAGE_WRAPPER::VT_CONTENT_TYPE, static_cast<uint8_t>(content_type), 0);
  }
  void add_content(::flatbuffers::Offset<void> content) {
    fbb_.AddOffset(MESSAGE_WRAPPER::VT_CONTENT, content);
  }
  explicit MESSAGE_WRAPPERBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<MESSAGE_WRAPPER> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<MESSAGE_WRAPPER>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<MESSAGE_WRAPPER> CreateMESSAGE_WRAPPER(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    protocol::MESSAGETYPE message_type = protocol::MESSAGETYPE_BEGIN,
    protocol::MessageContent content_type = protocol::MessageContent_NONE,
    ::flatbuffers::Offset<void> content = 0) {
  MESSAGE_WRAPPERBuilder builder_(_fbb);
  builder_.add_content(content);
  builder_.add_message_type(message_type);
  builder_.add_content_type(content_type);
  return builder_.Finish();
}

inline bool VerifyMessageContent(::flatbuffers::Verifier &verifier, const void *obj, MessageContent type) {
  switch (type) {
    case MessageContent_NONE: {
      return true;
    }
    case MessageContent_REQUEST_LOGIN: {
      auto ptr = reinterpret_cast<const protocol::REQUEST_LOGIN *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageContent_RESPONSE_LOGIN: {
      auto ptr = reinterpret_cast<const protocol::RESPONSE_LOGIN *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageContent_REQUEST_REGIST: {
      auto ptr = reinterpret_cast<const protocol::REQUEST_REGIST *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageContent_RESPONSE_REGIST: {
      auto ptr = reinterpret_cast<const protocol::RESPONSE_REGIST *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageContent_REQUEST_ROOM_CREATE: {
      auto ptr = reinterpret_cast<const protocol::REQUEST_ROOM_CREATE *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageContent_RESPONSE_ROOM_CREATE: {
      auto ptr = reinterpret_cast<const protocol::RESPONSE_ROOM_CREATE *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageContent_REQUEST_ROOM_ENTRANCE: {
      auto ptr = reinterpret_cast<const protocol::REQUEST_ROOM_ENTRANCE *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageContent_RESPONSE_ROOM_ENTRANCE: {
      auto ptr = reinterpret_cast<const protocol::RESPONSE_ROOM_ENTRANCE *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageContent_REQUEST_ROOM_LEAVE: {
      auto ptr = reinterpret_cast<const protocol::REQUEST_ROOM_LEAVE *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageContent_RESPONSE_ROOM_LEAVE: {
      auto ptr = reinterpret_cast<const protocol::RESPONSE_ROOM_LEAVE *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageContent_REQUEST_SEND_MESSAGE: {
      auto ptr = reinterpret_cast<const protocol::REQUEST_SEND_MESSAGE *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageContent_RESPONSE_SEND_MESSAGE: {
      auto ptr = reinterpret_cast<const protocol::RESPONSE_SEND_MESSAGE *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageContent_NOTIFY_MESSAGE: {
      auto ptr = reinterpret_cast<const protocol::NOTIFY_MESSAGE *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageContent_NOTIFY_ROOMLIST: {
      auto ptr = reinterpret_cast<const protocol::NOTIFY_ROOMLIST *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageContent_REQUEST_LOGOUT: {
      auto ptr = reinterpret_cast<const protocol::REQUEST_LOGOUT *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageContent_RESPONSE_LOGOUT: {
      auto ptr = reinterpret_cast<const protocol::RESPONSE_LOGOUT *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyMessageContentVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyMessageContent(
        verifier,  values->Get(i), types->GetEnum<MessageContent>(i))) {
      return false;
    }
  }
  return true;
}

inline const protocol::MESSAGE_WRAPPER *GetMESSAGE_WRAPPER(const void *buf) {
  return ::flatbuffers::GetRoot<protocol::MESSAGE_WRAPPER>(buf);
}

inline const protocol::MESSAGE_WRAPPER *GetSizePrefixedMESSAGE_WRAPPER(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<protocol::MESSAGE_WRAPPER>(buf);
}

inline bool VerifyMESSAGE_WRAPPERBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<protocol::MESSAGE_WRAPPER>(nullptr);
}

inline bool VerifySizePrefixedMESSAGE_WRAPPERBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<protocol::MESSAGE_WRAPPER>(nullptr);
}

inline void FinishMESSAGE_WRAPPERBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<protocol::MESSAGE_WRAPPER> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMESSAGE_WRAPPERBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<protocol::MESSAGE_WRAPPER> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace protocol

#endif  // FLATBUFFERS_GENERATED_MESSAGEWRAPPER_PROTOCOL_H_
